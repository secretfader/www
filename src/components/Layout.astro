---
import "../styles/site.css";
import profile from "../assets/profile.jpg";
import Footer from "./Footer.astro";
import { ClientRouter } from "astro:transitions";

interface Props {
    title?: string;
    description?: string;
    image?: string;
    classes?: string[];
}

const { title, description, image, classes } = Astro.props;
const canonical = new URL(Astro.url.pathname, Astro.site);
---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <ClientRouter />
        {canonical && <link rel="canonical" href={canonical} />}
        <slot name="structured-data" />
        {
            image ? (
                <meta name="og:image" content={image} />
            ) : (
                <meta name="og:image" content={profile.src} />
            )
        }
        {
            description ? (
                <meta name="description" content={description} />
            ) : (
                <meta
                    name="description"
                    content="Nicholas Young is a filmmaker, designer, engineer, and interdisciplinary artist from Colorado."
                />
            )
        }
        {
            title ? (
                <title>{title} | Nicholas Young</title>
            ) : (
                <title>Nicholas Young</title>
            )
        }
        <script
            defer
            src="https://cloud.umami.is/script.js"
            data-website-id="1d43dc8a-52a5-41ee-a3ef-acc0badb7398"></script>
        <script
            type="module"
            src="https://cdn.jsdelivr.net/npm/media-chrome@4/+esm"></script>
        <script
            type="module"
            src="https://cdn.jsdelivr.net/npm/youtube-video-element@1.1/+esm"
        ></script>
        <script is:inline>
            function setDarkMode(document) {
                const getThemePreference = () => {
                    if (
                        typeof localStorage !== "undefined" &&
                        localStorage.getItem("theme")
                    ) {
                        return localStorage.getItem("theme");
                    }
                    return window.matchMedia("(prefers-color-scheme: dark)")
                        .matches
                        ? "dark"
                        : "theme-light";
                };
                const isDark = getThemePreference() === "dark";
                document.documentElement.classList[isDark ? "add" : "remove"](
                    "dark",
                );

                if (typeof localStorage !== "undefined") {
                    const observer = new MutationObserver(() => {
                        const isDark =
                            document.documentElement.classList.contains("dark");
                        localStorage.setItem(
                            "theme",
                            isDark ? "dark" : "theme-light",
                        );
                    });
                    observer.observe(document.documentElement, {
                        attributes: true,
                        attributeFilter: ["class"],
                    });
                }
            }

            setDarkMode(document);

            document.addEventListener("astro:before-swap", (ev) => {
                // Pass the incoming document to set the theme on it
                setDarkMode(ev.newDocument);
            });
        </script>
    </head>
    <body
        class:list={[
            "bg-natural-200",
            "dark:bg-neutral-800",
            "font-geohumanist",
            ...(classes || []),
        ]}
    >
        <slot />
        <Footer />
    </body>
</html>
