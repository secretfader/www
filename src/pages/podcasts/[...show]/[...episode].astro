---
import Layout from "../../../components/Layout.astro";
import Nav from "../../../components/Nav.astro";
import Header from "../../../components/Header.astro";
import Container from "../../../components/Container.astro";
import SubscribeMenu from "../../../components/SubscribeMenu.astro";
import Prose from "../../../components/Prose.astro";
import {
    getPodcasts,
    getEpisodesByShowID,
    buildMediaURL,
    rewriteURLForPodtrac,
    hasMP3,
    formatDate,
} from "../../../data";
import { render } from "astro:content";

export const prerender = true;

export async function getStaticPaths() {
    const inputs = (await getPodcasts()).map((p) => ({
        show: p,
        episodes: getEpisodesByShowID(p.id),
    }));

    let paths = [];
    for (const { show, episodes } of inputs) {
        for (const episode of await episodes) {
            paths.push({
                params: {
                    show: show.id,
                    episode: episode.data.slug || episode.data.number,
                },
                props: {
                    show: {
                        ...show,
                        ...show.data,
                    },
                    episode: {
                        ...episode,
                        ...episode.data,
                    },
                },
            });
        }
    }

    return paths;
}
const {
    show: { links: showLinks, complete, title: showTitle },
    episode: { title, description, links, youtubeId, },
} = Astro.props;

const pubDate = Astro.props.episode.pubDate || Astro.props.episode.date;

const { host, assets } = {
    ...Astro.props.show.media,
    ...Astro.props.episode.media,
};

const media = (assets || []).map((a) => ({
    ...a,
    url: rewriteURLForPodtrac(buildMediaURL(host, a).toString()),
}));

const { Content } = await render(Astro.props.episode);
---

<Layout title={title} description={description}>
    <Nav />
    <div class="container mx-auto px-6 my-4 lg:my-8 lg:px-0 relative z-3">
        <a href={`/podcasts/${Astro.props.show.id}`}>
            <span
                class="text text-gray-700 dark:text-gray-400 font-light mb-8 block underline underline-offset-2"
            >
                &larr; Back to {Astro.props.show.title}
            </span>
        </a>
         {complete && (<div class="p-6 bg-gray-100 dark:bg-gray-900 dark:text-gray-300 mb-8 max-w-5xl"><p>Hey friend! Just so you're aware, <span class="italic">{showTitle}</span> is complete and no longer producing episodes. Please enjoy the archives, and maybe take a listen to my <a class="underline" href="/">current work</a>.</p></div>)}
         {complete ? (
          <h1
              class="text-gray-500 dark:text-gray-400 font-bold text-4xl lg:text-7xl xl:text-8xl"
          >
            #{Astro.props.episode.number}: {title}
          </h1>
         ) : (
            <h1 class="text-gray-500 dark:text-gray-400 font-bold text-4xl lg:text-7xl xl:text-8xl"
            >
                {title}
            </h1>
         )}
        {description && !complete && (
            <div class="text-xl lg:text-2xl mt-6 max-w-7xl dark:text-gray-300">
                <span>{description}</span>
            </div>
        )}
        <div>
            <div class="mt-6 mb-6 font-semibold text-xs text-slate-700 dark:text-gray-400">
                <span class="uppercase">Published On</span>
                <time datetime={pubDate} pubdate="pubdate">{formatDate(pubDate)}</time>
            </div>
            {showLinks ? <SubscribeMenu title="Follow &amp; Subscribe" links={showLinks} /> : undefined}
        </div>
    </div>
    <Container
        classes={[
            "grid",
            "grid-cols-1",
            "lg:grid-cols-12",
            "lg:gap-12",
            "mb-20",
        ]}
    >
        <div
            class="col-span-1 text-lg lg:text-xl xl:text-2xl lg:col-span-10 dark:text-gray-100"
        >
            {hasMP3 && (
              <media-controller audio class="w-full mb-4 lg:mb-8 z-1">
                <audio
                  slot="media"
                  src={media[0].url}
                ></audio>
                <media-control-bar class="w-full">
                    <media-play-button class="p-2"></media-play-button>
                  <media-time-display showduration></media-time-display>
                  <media-time-range></media-time-range>
                  <media-playback-rate-button></media-playback-rate-button>
                  <media-mute-button></media-mute-button>
                  <media-volume-range></media-volume-range>
                </media-control-bar>
              </media-controller>
            )}
            { youtubeId && (
                <media-controller
                    class="w-full aspect-video mb-4 lg:mb-8 relative isolate z-1"
                >
                    <youtube-video
                        src={`https://www.youtube.com/watch?v=${youtubeId}&hd=1`}
                        slot="media"
                        class="absolute w-full h-full isolate"
                        crossorigin></youtube-video>
                    <media-loading-indicator slot="centered-chrome" noautohide
                    ></media-loading-indicator>
                    <media-control-bar class="w-full bottom-0 absolute">
                      <media-play-button class="p-2" />
                      <media-mute-button />
                      <media-volume-range />
                      <media-time-range />
                      <media-fullscreen-button class="p-2" />
                    </media-control-bar>
                </media-controller>
            )}
            <Prose>
                <Content />
            </Prose>
        </div>
        <div
            class="text-gray-700 dark:text-gray-300 mt-12 col-span-1 lg:col-span-2 lg:mt-0"
        >
            {
                links && links.length > 0 ? (
                    <div>
                        <span class="font-semibold uppercase underline underline-offset-8">
                            Episode Links
                        </span>
                        <ul>
                            {links.map((l) => (
                                <li class="relative my-4">
                                    <a
                                        class="block mb-1"
                                        target="_blank"
                                        rel="noopener"
                                        href={l.href}
                                    >
                                        {l.title}
                                    </a>
                                </li>
                            ))}
                        </ul>
                    </div>
                ) : undefined
            }
        </div>
    </Container>
</Layout>
